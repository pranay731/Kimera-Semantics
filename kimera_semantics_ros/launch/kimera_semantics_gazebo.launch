<?xml version="1.0" encoding="ISO-8859-15"?>
<launch>

  <!-- Gazebo Simulation with kinect camera.
  Requires Color, Depth and Semantic Image as input.
  All the inputs are in same frame. -->
  <arg name="voxel_size"     default="0.05"/>
  <arg name="max_ray_length_m" default="5"/>
  <arg name="should_use_sim_time" default="true" />
  <param name="use_sim_time" value="$(arg should_use_sim_time)" />

  <!-- Change sensor frame to camera base frame in gazebo.
  -Typically will be 'kinect_frame' or 'kinect_sensor' -->
  <arg name="sensor_frame" default="kinect_sensor"/>


  <!-- If you just want to run 3D reconstruction without semantics, set this flag to false-->
  <arg name="metric_semantic_reconstruction" default="true"/>

  <arg name="semantic_pointcloud"         default="/semantic_pointcloud"/>
  <arg name="use_freespace_pointcloud"    default="false" />
  <arg name="freespace_pointcloud"        default="/dev/null"/>

  <!-- Input -->
  <!-- Topic names should be changed accordingly -->
  <arg name="left_cam_info_topic"         default="/camera/color/camera_info"/>
  <arg name="left_cam_topic"              default="/camera/color/image_raw"/>
  <arg name="left_cam_depth_topic"        default="/camera/depth/image_raw"/>
  <arg name="left_cam_segmentation_topic" default="/segmentation/color/image_raw"/>


  <!-- Generate input pointcloud with semantic labels for kimera-semantics:
     - Using the depth image and registered semantic image -->
  <arg name="publish_point_clouds" default="true"/>

  <group if="$(arg publish_point_clouds)">
    <!-- Launch Nodelet manager: used by depth_image_proc and disparity_image_proc -->
    <node pkg="nodelet" type="nodelet" name="nodelet_manager" args="manager"
      output="screen"/>

    <!-- Converts registered depth image and RGB image into an RGB pointcloud.
         Using depth and semantic image, it generates semantic pointcloud. We only
        run this if we are not using stereo depth reconstruction instead. -->
    <node pkg="nodelet" type="nodelet" name="cloudify"
      args="load depth_image_proc/point_cloud_xyzrgb nodelet_manager
      -no-bond" output="screen">
      <!-- Input -->
      <remap from="rgb/camera_info"             to="$(arg left_cam_info_topic)"/>
      <remap from="rgb/image_rect_color"        to="$(arg left_cam_segmentation_topic)" if="$(arg metric_semantic_reconstruction)"/>
      <remap from="rgb/image_rect_color"        to="$(arg left_cam_topic)"              unless="$(arg metric_semantic_reconstruction)"/>
      <remap from="depth_registered/image_rect" to="$(arg left_cam_depth_topic)" />
      <!-- Output -->
      <remap from="depth_registered/points"     to="$(arg semantic_pointcloud)"/>
      <!-- Params -->
      <param name="queue_size" value="20"/>
    </node>
  </group>

  <arg name="pkg_type"    default="kimera_semantics_ros"  if="$(arg metric_semantic_reconstruction)"/>
  <arg name="server_type" default="kimera_semantics_node" if="$(arg metric_semantic_reconstruction)"/>
  <arg name="pkg_type"    default="voxblox_ros" unless="$(arg metric_semantic_reconstruction)"/>
  <arg name="server_type" default="tsdf_server" unless="$(arg metric_semantic_reconstruction)"/>
  <node name="kimera_semantics_node" pkg="$(arg pkg_type)" type="$(arg server_type)" output="screen"
    args="-alsologtostderr -colorlogtostderr" clear_params="true">
    <!-- Input -->
    <remap from="pointcloud"                to="$(arg semantic_pointcloud)"/>

    <!-- Params -->
    <param name="tsdf_voxel_size"           value="$(arg voxel_size)" />
    <param name="tsdf_voxels_per_side"      value="16" />
    <param name="max_ray_length_m"          value="$(arg max_ray_length_m)" />
    <param name="min_time_between_msgs_sec" value="0.2" />
    <param name="voxel_carving_enabled"     value="true" />
    <param name="color_mode"                value="lambert_color"/>
    <param name="use_const_weight"          value="false" />
    <param name="use_freespace_pointcloud"  value="$(arg use_freespace_pointcloud)" />
    <remap from="freespace_pointcloud"      to="$(arg freespace_pointcloud)"/>

    <param name="sensor_frame"              value="$(arg sensor_frame)"/>
    <param name="use_tf_transforms"         value="true" />

    <param name="enable_icp"                value="false" />
    <param name="icp_iterations"            value="10" />

    <param name="verbose"                   value="false" />

    <!-- Method to update voxels' information: "fast" or "merged" -->
    <param name="method"                           value="merged" />
    <!-- "color", "semantic" or "semantic_probability" -->
    <param name="semantic_color_mode"              value="semantic"/>
    <param name="semantic_measurement_probability" value="0.8" />

    <!-- Dynamic Semantic Label Person. Id is 12 for ADE20K dataset. -->
    <rosparam param="dynamic_semantic_labels">[12]</rosparam>

    <param name="slice_level" value="1.0" />

    <!-- CSV file path cotaining labels and their color values.
    This is dependent on classes and their respective color in egmented image. -->
    <param name="semantic_label_2_color_csv_filepath"
    value="$(find kimera_semantics_ros)/cfg/ade20k_segmentation_mapping.csv"/>

    <param name="publish_pointclouds"     value="false"/>
    <param name="update_mesh_every_n_sec" value="0.1" />
    <param name="mesh_filename"           value="$(find kimera_semantics_ros)/mesh_results/$(anon kimera).ply" />
  </node>

<!-- Kimera needs parent frame to be named as 'world'
This is a Static transform publisher which publishes a identity transform between odom/map and world.
'tf_remap' can be also used instead of publishing identity transfor. -->
<node pkg="tf" type="static_transform_publisher" name="odom_world" args="0 0 0 0 0 0 world odom 100"/>
     
</launch>
